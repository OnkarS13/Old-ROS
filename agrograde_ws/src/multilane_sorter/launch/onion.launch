<launch>
    <arg name="offline" default="true"/>
    <arg name="training_mode" default="false"/>

    <include file="$(find rosbridge_server)/launch/rosbridge_websocket.launch" > 
        <arg name="port" value="9090"/>
    </include>
    
    <!-- lane_1 -->
    <arg name="lane_1"                 default="true"/>

    
    <!-- lane_2 -->
    <arg name="lane_2"                 default="true"/>
 

    <rosparam command="load" file="$(find multilane_sorter)/yamls/parameters.yaml" />
    <rosparam command="load" file="$(find multilane_sorter)/yamls/decision.yaml" />
 

    <group if="$(arg lane_1)" ns="lane_1">
        <!-- Offline -->
        <node if="$(arg offline)" pkg="multilane_sorter" type="imageFolderPub.py" name="image_act_pub">
            <remap from="image_raw" to="actuator/image_raw"/>
                            
        </node>
        <node if="$(arg offline)" pkg="multilane_sorter" type="imageFolderPub.py" name="image_non_act_pub">
            <remap from="image_raw" to="non_actuator/image_raw"/>            
        </node>
        
        <!-- Online -->
        <node unless="$(arg offline)" pkg="mvs_ros_pkg"
            type="grabImgWithTrigger" name="actuator_camera" args="$(find multilane_sorter)/config/camera_11.yaml"  
            respawn="false" output="screen" />
          
        <node unless="$(arg offline)" pkg="mvs_ros_pkg" 
            type="grabImgWithTrigger" name="non_actuator_camera" args="$(find multilane_sorter)/config/camera_12.yaml" 
            respawn="false" output="screen"/>



        <node pkg="multilane_sorter" type="aiNode_onion.py" name="segmentation_node" output = "screen">
            <!-- <param name="~mask_threshold"  value="22"/> -->
            <param name="~camera_id_1"  value="camera_11"/>
            <param name="~camera_id_2"  value="camera_12"/>
            <param name="~training_mode" value="$(arg training_mode)" />        
        </node> 
            
        <node pkg="multilane_sorter" type="decisionNode.py" name="decision_inference" output="screen">    
        </node>
    
        <node name="signaling_node" pkg="multilane_sorter" type="signals.py" output = "screen" > 
            <param name="arduino_num"  value="1"/>
        </node>


        <!-- <node pkg="multilane_sorter" type="postprocessingNode.py" name="postProcessing" output ="screen"> -->
            
        <!-- </node> -->

    </group>

 <group if="$(arg lane_2)" ns="lane_2">


         <node if="$(arg offline)" pkg="multilane_sorter" type="imageFolderPub_2.py" name="image_act_pub">
            <remap from="image_raw" to="actuator/image_raw"/>
                            
        </node>
        <node if="$(arg offline)" pkg="multilane_sorter" type="imageFolderPub_2.py" name="image_non_act_pub">
            <remap from="image_raw" to="non_actuator/image_raw"/>            
        </node>

        <node unless="$(arg offline)" pkg="mvs_ros_pkg"
        type="grabImgWithTrigger" name="actuator_camera" args="$(find multilane_sorter)/config/camera_21.yaml" 
        respawn="false" output="screen" />
            
            
        <node unless="$(arg offline)" pkg="mvs_ros_pkg" 
        type="grabImgWithTrigger" name="non_actuator_camera" args="$(find multilane_sorter)/config/camera_22.yaml"
        respawn="false" output="screen"/>
       
        <node pkg="multilane_sorter" type="aiNode_onion.py" name="segmentation_node" output = "screen">
            <!-- <param name="~mask_threshold"  value="22"/> -->
            <param name="~camera_id_1"  value="camera_21"/>
            <param name="~camera_id_2"  value="camera_22"/>  
            <param name="~training_mode" value="$(arg training_mode)" /> 
        </node>  
        
        <node pkg="multilane_sorter" type="decisionNode.py" name="decision_inference" output="screen">    
        </node>

        <node name="signaling_node" pkg="multilane_sorter" type="signals.py" output = "screen" > 
            <param name="arduino_num"  value="2"/>
        </node>  


        <!-- <node pkg="multilane_sorter" type="postprocessingNode.py" name="postProcessing" output ="screen"> -->
            
        <!-- </node>     -->

    </group>

   <!-- <node name="GUINode" pkg="multilane_sorter" type="guiDataNode.py" output = "screen" /> -->



</launch>

